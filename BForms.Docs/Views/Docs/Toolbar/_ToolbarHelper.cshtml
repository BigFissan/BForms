@using BForms.Docs.Helpers

<h3 id="ToolbarHelper">Toolbar helper</h3>

<p>In order to render a toolbar you will need to use the <code>Html.ToolbarFor</code> helper extension.
The basic setup requirements for this to render something looks like this:    
</p>
<pre class="prettyprint lang-cs bs-example">
@Html.InsertFileContentCached("~/Views/Docs/Toolbar/Source/_BasicSetup.cs.embed")
</pre>
<br />

<p>
    As you would expect the above code does nothing but render an empty toolbar. It doesn't really make sense to use it this way, so in order to make it truly functional we have to set some more properties.
    This can be achieved in 2 ways: by decorating your model property with attributes (<code>BsToolbarAttribute</code> and <code>DisplayAttribute</code>) - limited, not all properties can be set this way - or by setting them in your .cshtml file - all properties can be set and those that are set here overrides those set in the declarative way.
</p>

<div class="bs-example bs-img-example">
    <img src="@Url.Content("~/Content/images/docs/empty-toolbar.png")">
</div>

<h4>Display name</h4>
<p>    
    The name that describes the entity that the toolbar will try to manipulate.
    It can be set both ways.
</p>

<p>Declarative - Decorate your property model with DisplayAttribute that comes with MVC</p>
<pre class="prettyprint lang-cs bs-example">
@Html.InsertFileContentCached("~/Views/Docs/Toolbar/Source/_DisplayNameDeclarative.cs.embed")
</pre>
<br />

<p>Razor</p>
<pre class="prettyprint lang-cs bs-example">
@Html.InsertFileContentCached("~/Views/Docs/Toolbar/Source/_DisplayNameRazor.cs.embed")
</pre>

<div class="bs-example bs-img-example">
    <img src="@Url.Content("~/Content/images/docs/toolbar-with-name.png")">
</div>
<br />

<h4>Theme</h4>
<p>
    You can easily change the look of your toolbar by setting the theme. It actually just changes the colour of your component, but it is a simple and elegant feature that helps you to change basic styling with no effort at all.
    It can be set both ways.
</p>

<p>Declarative - Decorate your property model with BsToolbarAttribute and set BsTheme property to the theme of your desire</p>
<pre class="prettyprint lang-cs bs-example">
@Html.InsertFileContentCached("~/Views/Docs/Toolbar/Source/_ThemeDeclarative.cs.embed")
</pre>
<br />

<p>Razor</p>
<pre class="prettyprint lang-cs bs-example">
@Html.InsertFileContentCached("~/Views/Docs/Toolbar/Source/_ThemeRazor.cs.embed")
</pre>
<br />

<p>
    The default theme is Turqoise and you can choose from Black, Blue, Orange, Green and Purple.
    See it live <a href="@Url.Action("Index", "Contributors", new { area="Demo"})">here</a> by clicking the arrow in the right and choosing another theme.
</p>
<br />

<h4 id="ToolbarControls">Controls</h4>
<p>
    Now you must say OK it can be blue, it can be black, it can have a name but it still has no buttons to interact with and you are right. It's time to add some controls.
    Be careful! By adding controls on the servers side doesn't mean that the user can instantly interact with them. For that you must do a little client side coding; more of that <a href="#javascript">here</a>.
</p>
<p>
    Out of the box <code>BsToolbar</code> comes with 3 functionalities: quick search, advanced search and add. Sadly this part is for Razor only.
</p>

<pre class="prettyprint lang-cs bs-example">
@Html.InsertFileContentCached("~/Views/Docs/Toolbar/Source/_Controls.cs.embed")
</pre>
<br />

<p>
    There are 3 types of controls: actions, tabs and custom. Above we have two examples of tabs (Add and AdvancedSearch - well they are not entirely tabs yet, will discuss it later) and a custom one(QuickSearch)
</p>

<p>
    If you want to render actions or tabs you have 2 choices: pick a default one from BsToolbarActionType
</p>

<pre class="prettyprint lang-cs bs-example">
@Html.InsertFileContentCached("~/Views/Docs/Toolbar/Source/_DefaultControls.cs.embed")
</pre>

<p>
    which will automatically render the action or tab button, or add a new one
</p>

<pre class="prettyprint lang-cs bs-example">
@Html.InsertFileContentCached("~/Views/Docs/Toolbar/Source/_NewControls.cs.embed")
</pre>
<br />

<p>
    and customize it however you like. The level of customization between default and new ones is the same, the only difference being that the default ones can be used out of the box.
</p>
<br />

<h4 id="razor-custom-controls">Custom controls</h4>
<p>
    As stated above you can add custom controls to your toolbar and <strong>BsForms</strong> comes with a built-in one - <code>BsToolbarQuickSearch</code>. To use it simply add
</p>

<pre class="prettyprint lang-cs bs-example">
@Html.InsertFileContentCached("~/Views/Docs/Toolbar/Source/_ControlsQuickSearchRazor.cs.embed")
</pre>
<br />

<p>
    You can add as many custom controls as you like, but as the name says, it's custom so you have to build it yourself.
    Luckily this is a fairly easy task to do. Let's take a look at the quick search example:
</p>

<pre class="prettyprint lang-java bs-example">
@Html.InsertFileContentCached("~/Views/Docs/Toolbar/Source/_ControlsQuickSearch.cs.embed")
</pre>
<br />

<p>
    Now that you have your page set up (html wise) it's time to add some interactions.
</p>

<h3 id="Javascript">Javascript</h3>

<p>
    The first step is to require toolbar.js
</p>

<pre class="prettyprint lang-js bs-example">
@Html.InsertFileContentCached("~/Views/Docs/Toolbar/Source/_RequireSetup.cs.embed")
</pre>
<br />

<p>Now that the script is loaded we can apply the toolbar widget on our element</p>

<pre class="prettyprint lang-js bs-example">
@Html.InsertFileContentCached("~/Views/Docs/Toolbar/Source/_JsBasicSetup.cs.embed")
</pre>
<br />

<h4 id="widget_options">Options</h4>

<code>uniqueName</code>

<p>
    <strong>type</strong> string
    <br />
    <strong>default</strong> DOM element id
</p>

<p>
    Used to uniquely identify the toolbar. It is not required as long as the toolbar has the <strong>id</strong> attribute set.
</p>

<code>subscribers</code>

<p>
    <strong>type</strong> Array
    <br />
    <strong>default</strong> empty
</p>

<p>
    The toolbar by itself has no meaning. That's why for it to be functional you must provide a list of subscribers.
    These will be notified when an action is being made.
</p>

<code>autoInitControls</code>

<p>
    <strong>type</strong> boolean
    <br />
    <strong>default</strong> true
</p>

<p>
    When toolbar.js is loaded, the scripts for the default toolbar controls (quick search, advanced search and add) are also loaded.
    If <code>autoInitControls = true</code> they are automatically initialized if you added them when you configured the toolbar controls on the server side.
    Also if you call your own plugins you can set them to automatically initialize too. Read more about this <a href="#js-custom-controls">here</a>.
</p>

<code>reset</code>

<p>
    <strong>type</strong> function
    <br />
    <strong>default</strong> resets advanced and quick search
</p>

<p>
    Supply a handler if there is anything you would like to reset in your toolbar 
</p>

<code>controls</code>

<p>
    <strong>type</strong> Array
    <br />
    <strong>default</strong> empty
</p>

<p>
    Add your custom controls that you don't want to automatically be initialized.
</p>

<br />

<h4 id="js_custom_controls">Custom controls</h4>

<p>
    <a href="#razor-custom-controls">Earlier</a> I've showed you how to implement a custom control on the server side.
    Again we must provide some interaction for the user, so we have to write a plugin similar to the default ones.
</p>

<p>
    Below you will find the implementation of the quick search plugin.
</p>

<pre class="prettyprint lang-js bs-example">
@Html.InsertFileContentCached("~/Views/Docs/Toolbar/Source/_ControlsQuickSearchJs.cs.embed")
</pre>
<br />

<h4 id="manually_controls">Adding controls manually</h4>

<p>
    In order to stop your controls to be automatically added to your toolbar you have to set <code>autoInitControls</code> to <code>false</code>.
    Then you can add your controls on toolbar initialization or after.
</p>

<pre class="prettyprint lang-js bs-example">
@Html.InsertFileContentCached("~/Views/Docs/Toolbar/Source/_ControlsManuallyInit.cs.embed")
</pre>
<br />

<h4 id="customizing_controls">Customizing controls</h4>

<p>
    Advanced search and add controls manipulate the toolbar subscribers by submiting a form. By using their corresponding plugins
    you can customize the form functionality.
</p>

<p>
    <strong>Add control</strong>
</p>

<p>
    By default the add form has two buttons: save and reset. The save button saves the new entity and adds it to the grid as the first element.
    The reset button simply resets all form fields. 
</p>

<pre class="prettyprint lang-js bs-example">
@Html.InsertFileContentCached("~/Views/Docs/Toolbar/Source/_ControlsAddDefaults.cs.embed")
</pre>
<br />

<p>
    <strong>Advanced search control</strong>
</p>

<p>
    By default the advanced search form has two buttons: search and reset. The search button triggers filter grid by sending the parsed form data.
    The reset button does the same but before parsing the form we reset it. Even though we reset the form we still need to parse it in order
    to filter the grid in case the form has some default fields values. 
</p>

<pre class="prettyprint lang-js bs-example">
@Html.InsertFileContentCached("~/Views/Docs/Toolbar/Source/_ControlsAdvancedSearchDefaults.cs.embed")
</pre>
<br />

<p>
    You can customize the buttons behaviour of the plugins described above by following the next steps:
</p>

<pre class="prettyprint lang-js bs-example">
@Html.InsertFileContentCached("~/Views/Docs/Toolbar/Source/_DefaultFormControlsCustomization.cs.embed")
</pre>
<br />
