@using BForms.Docs.Helpers
@{
    ViewBag.Title = "Get started with HTML5 Forms";
}

<div class="row">
    <div class="hidden-xs hidden-sm col-md-3 col-lg-3">
        <div class="bs-sidebar">
            <ul class="nav bs-sidenav">
                <li>
                    <a href="#setup">Forms Tutorial</a>
                    <ul class="nav">
                        <li><a href="#model">Model</a></li>
                        <li><a href="#view">View</a></li>
                        <li><a href="#controller">Controller</a></li>
                        <li><a href="#js">JavaScript</a></li>
                        <li><a href="#result">Final Result</a></li>
                    </ul>
                </li>
            </ul>
        </div>
    </div>

    <main class="col-md-9 col-lg-9" role="main">
        <div class="bs-docs-section">
            <div class="page-header">
                <h1 id="example">Building HTML5 forms with BForms</h1>
            </div>
            <h3 id="introduction">Introduction</h3>
            <p>
                This tutorial will guide you throw all the steps needed to create a responsive HTML form with client and server side validation.
            </p>
            <h3 id="model"> 1. Create a model </h3>
            <p>We need to create a model (for example: SubscriberModel) and define it’s properties as you can see in the code bellow.</p>
            <pre class="prettyprint bs-example">
@Html.InsertFileContentCached("~/Views/Start/Form/Source/_Model.cs.embed")
            </pre>
            <br />
            <p>
                We use <code>BsControl</code> and <code>BsControlType</code> to describe a property type. Follow the link 
                <a href="@Url.Action("InputExtensions", "Docs")#input-section">Input controls</a> to read more about  BsControlType.Email,  
                BsControlType.TextBox, BsControlType.DropDownList and so on.
            </p>
            <h4 class="sub_title">Data binding </h4>
            <p>In order for SubscriptionType to be a valid dropdown we need to fill it with data. Let’s bind it to an enum :</p>
            <pre class="prettyprint bs-example">
@Html.InsertFileContentCached("~/Views/Start/Form/Source/_Enum.cs.embed")
            </pre>
            <br/>
            <p>Then you can use our helper:</p>
            <pre class="prettyprint bs-example">
@Html.InsertFileContentCached("~/Views/Start/Form/Source/_EnumHelper.cs.embed")
            </pre>
            <br/>
            <p>
                Note that, if you have set display attribute on your enum’s elements, the name or the resource specified in the attribute will 
                represent the dropdown option’s text. Otherwise option’s text will be the enum elements name.
            </p>
            <p>Here is an example where we use resources in the display attribute, as we mentioned in the previous paragraph.</p>
            <pre class="prettyprint bs-example">
@Html.InsertFileContentCached("~/Views/Start/Form/Source/_LocalizedEnum.cs.embed")
            </pre>
            <br />
            <h3 id="view">2. Create the View </h3>
            <p>
                As you could guess, in this view we have rendered all model properties. We used <code>BsInputFor</code>, which is a generic helper.
                You can read more about this helper and about other BForms input controls <a href="@Url.Action("InputExtensions", "Docs")#input-section">here</a>.
            </p>
            <pre class="prettyprint bs-example">
@Html.InsertFileContentCached("~/Views/Start/Form/Source/_View.cs.embed")
            </pre>
            <br />
            <p>
                There are two ways of displaying forms validation errors: the <code>@@Html.BsValidationSummary()</code> helper will render an alert at the top of the form
                and <code>@@Html.BsvalidationFor</code> that will render specific messages for each filed inside a tooltip.
            </p>
            <h3 id="controller">3. Create a Controller</h3>
            <p>
                We showed you earlier how to bind data and now you will see where to use it. We have our code in Controller because it’s small and 
                it’s just for demo purpose, but we recommend you to use repositories for data binding, CRUD operations, mapping operations and so on.
            </p>
            <p>
                We created a controller named SubscriberController where we’ll put our actions for <code>HttpGet</code> and <code>HttpPost</code>.
            </p>
            <pre class="prettyprint bs-example">
@Html.InsertFileContentCached("~/Views/Start/Form/Source/_Controller.cs.embed")
            </pre>
            <br />
            <p>
                You can see we have two actions named Index: one is for <code>GET</code> and the other one for <code>POST</code>.
            </p>
            <h4 class="sub_title">GET </h4>
            <p>
                The one for <code>GET</code> returns a strongly-typed view which receives a new model of type SubscriberModel 
                (that has SubscriberType property of type dropdown filled with data from our enum).
            </p>
            <h4 class="sub_title">POST </h4>
            <p>
                The one for <code>POST</code> executes actions for subscribing in your application, but in this case we added some ModelState errors, 
                because it’s just for demo purpose. As you can see, when we try to subscribe with the email <code>test@gmail.com</code> 
                we added a validation error for email model’s property which throws you this message : <em>"This address has been already used"</em>.
            </p>
            <p>
                Also, we added a form validation error (remember this). The first parameter of this method it’s empty(“”) because you don’t have a prefix for your form.
            </p>
            <p>
                For example, if you have a main model which has a property of type <code>SubscriberModel</code> and your actions receive that model as a 
                parameter than the prefix will be the name of the property. This explanation is illustrated bellow:
            </p>
            <pre class="prettyprint bs-example">
@Html.InsertFileContentCached("~/Views/Start/Form/Source/_AddFormError.cs.embed")
            </pre>
            <br />
            <pre class="prettyprint bs-example">
@Html.InsertFileContentCached("~/Views/Start/Form/Source/_MainModel.cs.embed")
            </pre>
            <br/>
            <h4 class="sub_title">Ajax Submit</h4>
            <p>If you don’t want to use server side post, you can also submit your form by <em>Ajax</em>.</p>
            <p>It's easy and we'll show you how.</p>
            <p>We use <code>RequireJS</code> so we can send action’s path to our ajax from controller. You can do this from the <code>GET</code> action as in the following code:</p>
            <pre class="prettyprint bs-example">
@Html.InsertFileContentCached("~/Views/Start/Form/Source/_JsAddOptions.cs.embed")
            </pre>
            <br/>
            <p>
                In our case, we added the option above on server <code>POST</code> too, because we have two submit methods in the same form. 
                As you could guess, if you press the server side submit button, when the page is reloaded, you’ll lose the url option because you don’t send it again. 
                If you don’t have the same situation in your project, you don’t have to do this( it’s just for demo purpose).
            </p>
            <p>
                In our case we use <code>RequireJsOptions.Add</code> with two parameters. The first one represents the option’s name sent to javascript file 
                (you'll see further in this guide how to use it) and the second parameter is the actual path to our action. Here we sent the url to use it in ajax, 
                but with <code>RequireJsOptions.Add</code> you can send practically any .NET object that supports JSON serialization. For example, if you have a list of int 
                elements like <code>var myList= new List&lt;int&gt;(){1,2,3}</code>, the code for sending it to js it's like this:
            </p>
            <p><code>RequireJsOptions.Add("list_of_int",myList)</code></p>
            <p>Our ajax action:</p>
            <pre class="prettyprint bs-example">
@Html.InsertFileContentCached("~/Views/Start/Form/Source/_AjaxAction.cs.embed")
            </pre>
            <br/>
            <p>As you can see, there are not so many changes in the <code>SubscribeByAjax</code> action compared to server <code>POST</code> action, Index, which was presented few moments ago.</p>
            <p>
                First of all, this action returns a <code>BsJsonResult</code> because it’s called by ajax. If the model is valid then the status of my 
                response will be <code>Success</code>. Otherwise we serialize ModelState errors and we send them to ajax with a validation error status. 
                In our case, we return the ModelState errors as we talked earlier.
            </p>
            <p>As you can see, <code>BsResponseStatus</code> is an enum defined like this:</p>
            <pre class="prettyprint bs-example">
@Html.InsertFileContentCached("~/Views/Start/Form/Source/_BsResponseStatusEnum.cs.embed")
            </pre>
            <br/>

            <h3 id="js">4. Create the JavaScript </h3>
            <p>
                First of all you need to create a folder named Controllers under Scripts. After that, if you don’t work in a MVC area, create a folder 
                called Root under Controllers (that you have created few seconds ago). Otherwise, replace Root with the area name. 
                Under last added folder create a new one which has the same name as your controller.
            </p>
            <p>
                Finally we create our JavaScript file subscriber-index.js. In order for RequireJS.NET to work, 
                all your js files must be named like <em>controller_name-action_name.js</em>.
            </p>
            <p>In the end you should have something like this: </p>
            <pre class="prettyprint bs-example">
@Html.InsertFileContentCached("~/Views/Start/Form/Source/_Folders.embed")
            </pre>
            <br/>
            <h4 class="sub_title">Subscriber-Index.js content:</h4>
            <pre class="prettyprint bs-example">
@Html.InsertFileContentCached("~/Views/Start/Form/Source/_InitJsContent.cs.embed")
            </pre>
            <br/>
            <p>To apply styles to our form we need to select it and use our method <code>bsInitUI</code>. That's all you have to do here.</p>
            <h4 class="sub_title">Ajax Submit </h4>
            <p>We talked earlier how your controller looks like when you want to submit a form by <code>Ajax</code>. Let's see how javascript file should look.</p>
            <p>First of all, you need to include references to some scripts:</p>
            <pre class="prettyprint bs-example">
@Html.InsertFileContentCached("~/Views/Start/Form/Source/_References.cs.embed")
            </pre>
            <br/>
            <p>Than we need to select our button from the view. In our case:</p>
            <pre class="prettyprint bs-example">
@Html.InsertFileContentCached("~/Views/Start/Form/Source/_SubscribeAjaxBtn.cs.embed")
            </pre>
            <br/>
            <p>To do so, we took a variable named <code>this.$ajaxSubscribeBtn = $('.js-subscriberAjaxBtn');</code> . We also have to add a handler, 
            which means an action that will be executed for an event (in our case a click event).</p>
            <pre class="prettyprint bs-example">
@Html.InsertFileContentCached("~/Views/Start/Form/Source/_InitAndAddHandler.cs.embed")
            </pre>
            <br/>
            <p>We bind a click event for <code>".js-subscriberAjaxBtn"</code> at our form. When this event is happening we call a function named <code>onSubscribe</code>.</p>
            <pre class="prettyprint bs-example">
@Html.InsertFileContentCached("~/Views/Start/Form/Source/_OnSubscribe.cs.embed")
            </pre>
            <br/>
            <p>As you can see, we call <code>$.validator.unobtrusive.parse</code> and we validate the form. In case the form has no client side errors 
            (<code>if (this.$subscriberForm.valid()) {...}</code>) we call our ajax.</p>
            <p>Things you need to notice at ajax call is that url is referenced by <code>this.options.subscriberUrl</code> 
            (we talked earlier about <a href="#controller">this</a>).</p>

            <p>When we receive a response for our ajax (on <code>.then</code> function), we first have to check if <code>response.Status</code> 
            (which in our case is an element from an enum - <code>BsResponseStatus</code>, which we presented you earlier at the controller step) 
            was sent as a validation error. If so, we show errors for the form using <code>.showErrors</code> function from <code>bforms.validate.js</code>.</p>
            <p>If you don't know what is <code>.then</code> you can read more about it here: <a href="http://api.jquery.com/deferred.then/">jQuery .then</a>.</p>
           <br/>
             <h3 id="result">5. Final Result </h3>
            <p>Here is a picture of what we achieved.</p>
            <div class="bs-example bs-img-example">
                <img src="@Url.Content("~/Content/images/docs/subscribe-form.PNG")" />
            </div>
            <br/>
            <p>Validation errors:</p>
            <div class="bs-example bs-img-example">
                <img src="@Url.Content("~/Content/images/docs/form-submited.PNG")" />
            </div>
            <br/>
            <div class="bs-example bs-img-example">
                <img src="@Url.Content("~/Content/images/docs/ajax-subscribe.PNG")" />
            </div>
         </div>

    </main>
</div>
