@using BForms.Docs.Helpers
@{
    ViewBag.Title = "Form";
}

<div class="row">
    <div class="hidden-xs hidden-sm col-md-3 col-lg-3">
        <div class="bs-sidebar">
            <ul class="nav bs-sidenav">
                <li>
                    <a href="#example">Grid Example</a>
                    <ul class="nav">
                        <li><a href="#initial">Initial Project</a></li>
                        <li><a href="#models">Models</a></li>
                        <li><a href="#repository">Repository</a></li>
                        <li><a href="#controller">Controller</a></li>
                        <li><a href="#views">Views</a></li>
                        <li><a href="#javascript">Javascript</a></li>
                    </ul>
                </li>
            </ul>
        </div>
    </div>

    <main class="col-md-9 col-lg-9" role="main">
        <div class="bs-docs-section">
            <div class="page-header">
                <h1 id="example">Simple form example</h1>
            </div>
            <h3 id="introduction">Introduction</h3>
            <p>
                In this tutorial, you will learn how to implement the <code>BForms.Grid</code> from scratch. We start by presenting the models we’ll use. Then will begin building the grid to present our data, step by step, adding more functionality as we go. At this step you will have a grid that displays your data, with sorting and pagination capabilities. Next step is to add editing capabilities to our rows by enabling the details for each row. We’ll also implement the Bulk Actions that will help us modify multiple rows at a time.
</p>
            <h3 id="initial"> Initial Project </h3>
            <p>We will start from an empty MVC Project. The project will be setup to use RequireJS and BForms.  To see a guide on how to setup your initial project please follow this link: <a href="@Url.Action("Setup", "Start", new { area = "" })#setup">Setup BForms for ASP.NET MVC</a></p>
            <p>We will work with mocked data that will fake a movies database.</p>
            <h4 class="sub_title">Movie Model Object</h4>
            <pre class="prettyprint bs-example">
@Html.InsertFileContentCached("~/Views/Start/Grid/Source/_Model.cs.embed")
            </pre>
            <br />
            <p>
                Our mocked data will consist in a list of movie objects added in the <code>BFormsContext</code> Constructor method. Here is an example of a movie record:
            </p>
            <pre class="prettyprint bs-example">
@Html.InsertFileContentCached("~/Views/Start/Grid/Source/_ModelInitialization.cs.embed")
            </pre>
            <p>The <code>BFormsContext</code> Object will be instantiated in the <code>BaseController</code> class. All our controllers will inherit from <code>BaseController</code>. This way will have access to the <code>BFormsContext</code> from inside our controllers.</p>
            
            <h3 id="models">STEP 01. Creating the Models</h3>
            <p>
                In this step we will create the models needed to build the grid. In our project let’s create a folder named ‘Models’. Add a new empty class file to this folder Named ‘MoviesModels.cs’.  This file will contain all our grid related models.
            </p>
            <p>
                The first model will be the row model. This model is used by the grid widget to populate the columns and header. The fields can be annotated with the <code>BsGridColumnAttribute</code>. This attribute can set some properties for the columns. For example, the ‘Title’ column width is set to 4, is made sortable and editable.
            </p>
            <pre class="prettyprint bs-example">
@Html.InsertFileContentCached("~/Views/Start/Grid/Source/_RowModel.cs.embed")
            </pre>
            <p>Here is how our grid will look for this row model:</p>
            <div class="bs-example bs-img-example">
                <img src="@Url.Content("~/Content/images/docs/eg-row-model.png")" />
            </div>
            <p>
                As you can see width of each column corresponds to the width specified in the model. The total width must be 12. Also because we have set the IsSortable property to false for the GrossRevenue column, you can see that the sorting is disabled in the grid, while for the other columns is enabled.
            </p>
            <br />
            <p>All this properties can be overridden in the view, but we’ll see this at a later time.</p>
            <p>
                However this is not enough. We still need a View Model. The grid can’t use the Row Model directly. After you define the row model you have to wrap it with the <code>BSGridModel</code> and append it to the view model.
            </p>
            <p>Here is how our Movies View Model will look like:</p>
            <pre class="prettyprint bs-example">
@Html.InsertFileContentCached("~/Views/Start/Grid/Source/_ViewModel.cs.embed")
            </pre>
            <p>Using Data Annotation we can set the properties for the grid. We use <code>Display(Name)</code> to set the name shown above the grid header. You can see the text ‘Top Movies’ next to the number representing the count.</p>
            <div class="bs-example bs-img-example">
                <img src="@Url.Content("~/Content/images/docs/eg-view-model.png")" />
            </div>
            <p>We also set the <code>BsGrid(HasDetails)</code> to false. This means that the row will not expand to show more details. We’ll set this to true at a later time.</p>
            <p>If we’ll add the <code>BForms.Toolbar</code> widget, our MoviesViewModel will also contain the Toolbar model. We’ll add it at a later time. For now we only need the Grid Model.</p>
            
            <h3 id="repository">STEP 02. Creating the Grid Repository</h3>
            <p>
                In this step we will create the Movies Grid Repository. This repository will inherit from <code>BsBaseGridRepository</code> and will have to override a few methods. These methods will be used to filter and sort the grid.
            </p>
            <p>In our project let’s create a folder named ‘Repositories’. Add a new empty class file to this folder named ‘MoviesGridRepository.cs’.</p>
            <p>
                This is how the initial class will look:
            </p>
            <pre class="prettyprint bs-example">
@Html.InsertFileContentCached("~/Views/Start/Grid/Source/_GridRepository.cs.embed")
            </pre>
            <p>
                As you can see, we inherit from <code>BsBaseGridRepository</code> and we pass the Movie Entity and the Movies Row Model. We also initialize the <code>BFormsContext</code> that we will later use to query the data set.
            </p>
            <p>
                Next we have to implement the <code>Query()</code> method.
            </p>
            <pre class="prettyprint bs-example">
@Html.InsertFileContentCached("~/Views/Start/Grid/Source/_Query.cs.embed")
            </pre>
            <p>
                This method is used to get the basic query. The items returned by this query will represent the total count, and will be ordered and mapped with the help of the methods we’ll implement next.
            </p>
            <p>
                The second method that we have to implement is <code>OrderQuery()</code>.
            </p>
            <pre class="prettyprint bs-example">
@Html.InsertFileContentCached("~/Views/Start/Grid/Source/_OrderQuery.cs.embed")
            </pre>
            <p>
                Here we use <code>orderQueryBuilder</code> property to order the query. In this example we order the query by WeekendRevenue descending. You can use any property of your model to set the initial order for your grid. Also if you have columns that don’t have an exact correspondent in your entity model, you have to use the <code>OrderFor()</code> method to specify the mapping. In this example we specify that the Recommended property of our row model will correspond to the IsRecommended property of our Movie Entity. Another usage of the OrderFor method would be to map one column to multiple properties of the entity.
            </p>
            <p>
                The final method we must implement is <code>MapQuery()</code>. This method is used make the select and convert your entities in row models. To do this, you will most likely implement a mapper(TEntity, TRow) to use in the select.
            </p>
            <p>Here is how the <code>MapQuery()</code> method will look like in our case:</p>
            <pre class="prettyprint bs-example">
@Html.InsertFileContentCached("~/Views/Start/Grid/Source/_MapQuery.cs.embed")
            </pre>
            <p>
                We have to also implement the MapMovie_MovieRowModel() used in the above example. This is how the mapper will look in our case:
            </p>
            <pre class="prettyprint bs-example">
@Html.InsertFileContentCached("~/Views/Start/Grid/Source/_Mapper.cs.embed")
            </pre>
            <p>This is a delegate that will take a Movie Entity and will return a <code>MovieRowModel</code>.</p>
            <p>At a later time we will enhance these methods to support search and filtering functionality.</p>
            
            <h3 id="controller">STEP 03. Creating the Controller</h3>
            <p>
                In this step we will create the Grid Controller. This controller will contain the actions needed to display the grid. We will display our grid on the home page so our controller will be named 'HomeController'.
            </p>
            <p>
                Create a new controller in the ‘Controllers’ folder. This controller will inherit from the BaseController. This is how it will look like:
            </p>
            <pre class="prettyprint bs-example">
@Html.InsertFileContentCached("~/Views/Start/Grid/Source/_Controller.cs.embed")
            </pre>
            <p>
                The index action of this controller will render the view that will contain our grid. However we have to do some changes before we can send the model our view will be expecting. We have to initialize our Grid Model with some initial settings like ‘Page’ and ‘PageSize’. Then we’ll use this model to initialize our View Model. The View Model will be send to the view. 
            </p>
            <p>
                Also we have to use <code>RequireJsOptions.Add()</code> method to send some data to the page. The data we need to send is the name of the ajax action that will be used by the grid pager to return other pages. This will be in the form of a Dictionary object that will contain for the moment only the <code>pageUrl</code> property.
            </p>
            <p>
                This is how our Index Action will look like at the end:
            </p>
            <pre class="prettyprint bs-example">
@Html.InsertFileContentCached("~/Views/Start/Grid/Source/_IndexAction.cs.embed")
            </pre>
            <p>
                Next we have to implement our <code>Pager()</code> Action that will be called by ajax from our grid and will return the requested page as <code>BsJsonResult</code>. Here is the final implementation of the method:
            </p>
            <pre class="prettyprint bs-example">
@Html.InsertFileContentCached("~/Views/Start/Grid/Source/_PagerAction.cs.embed")
            </pre>
            <p>After we implement these actions, our controller is ready. Next we have to create the views.</p>
            
            <h3 id="views">STEP 04. Creating the Views</h3>
            <p>
                In this step we will create the Grid Views. The Grid view will be implemented as a partial view rendered inside the Index View. Let’s first create the index view. To do this right click on the index action and choose ‘Add View’.
            </p>
            <p>
                This is how our index.cshtml should look like:
            </p>
            <pre class="prettyprint bs-example">
@Html.InsertFileContentCached("~/Views/Start/Grid/Source/_IndexView.cs.embed")
            </pre>
            <p>
                This view is just a container for the grid view. Let’s now create the <code>_Grid</code> partial view. Here we use the <code>BsGridFor()</code> html helper to create our grid. This helper returns a <code>BsGridHtmlBuilder</code> used to build and configure the html of the grid. This way we can set the grid’s properties, add attributes on the rows, add and modify columns, set grid’s color theme, add bulk actions, etc. This is our grid partial view:
            </p>
            <pre class="prettyprint bs-example">
@Html.InsertFileContentCached("~/Views/Start/Grid/Source/_GridView.cs.embed")
            </pre>
            <p>
                To keep it simple for the moment we only set some properties for the pager with the help of the <code>PagerSettings()</code> method, and we modify two columns with the help of <code>ConfigureColumns()</code> method.
            </p>
            <p>
                In the <code>ConfigureColumns()</code> method we change the display header of the column from <code>ReleaseDate</code> to <code>Year</code> with the help of the <code>Name()</code> method, and we also change the text so it displays only the <code>Year</code> property of the <code>ReleaseDate</code>.  For the <code>Recommended</code> column, we change the display text from true/false to Yes/No.
            </p>
            <p>
                In the <code>PagerSettings()</code> method we set the number of rows that should be displayed in the grid and we customize the look by setting some of the properties to true. With these settings the pager should look like this:
            </p>
            <div class="bs-example bs-img-example">
                <img src="@Url.Content("~/Content/images/docs/eg-pager.png")" />
            </div>
            <p>
                At this moment we still have to initialize the grid in javascript. We’ll do this next.
            </p>
            
            <h3 id="javascript">STEP 05. Initializing the Grid Widget</h3>
            <p>
                In this step we will create the javascript file that will be executed when the index page loads. There are two ways of working with the BForms JS components. One way is to use <code>RequireJS.NET</code> and the other is to reference the js files directly from the <code>~/Scripts/BForms/Bundles/js</code> folder. In this example we’ll use the RequireJS way. For this let’s create the folder structure that the RequireJs expects for our views.
            </p>
            <div class="bs-example bs-img-example">
                <img src="@Url.Content("~/Content/images/docs/eg-js-folder.png")" />
            </div>
            <p>
                Inside the Scripts folder create the following folder structure corresponding to our Home Controller, Index page: <code>Controllers/Root/Home/home-index.js</code>
            </p>
            <p>
                This is how the javascript file will look:
            </p>
            <pre class="prettyprint bs-example">
@Html.InsertFileContentCached("~/Views/Start/Grid/Source/_HomeIndexJs.cs.embed")
            </pre>
            <p>
                In this javascript file we require <code>bforms-grid</code>, <code>jquery</code> and <code>bootstrap</code>. We use the jQuery document ready method to initialize our page and to get the options send from the <code>HomeController</code>. As you remember we have send as an option the ‘pageUrl’, which is a link to the action that needs to be called by the pager, to get a different page or to change the number of entries displayed. On the page initialization we also find the grid by it’s id and initialize it with the minimum required parameters. We only set a <code>uniqueName</code> and the <code>pagerUrl</code> properties. We will later set more properties as we enhance the functionality of our grid. 
            </p>
            <p>
                Now we have a functional grid that we can see in action.
            </p>
            <div class="bs-example bs-img-example">
                <img src="@Url.Content("~/Content/images/docs/eg-simple-grid.png")" />
            </div>
            <p>
                Next step will be to enable details for the rows. This way we can modify the data and submit the changes to the server.
            </p>
        </div>
    </main>
</div>
