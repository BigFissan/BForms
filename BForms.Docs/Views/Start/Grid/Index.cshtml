@using BForms.Docs.Helpers
@{
    ViewBag.Title = "Form";
}

<div class="row">
    <div class="hidden-xs hidden-sm col-md-3 col-lg-3">
        <div class="bs-sidebar">
            <ul class="nav bs-sidenav">
                <li>
                    <a href="#example">Grid Tutorial</a>
                    <ul class="nav">
                        <li><a href="#initial">Initial Project</a></li>
                        <li><a href="#models">Models</a></li>
                        <li><a href="#repository">Repository</a></li>
                        <li><a href="#controller">Controller</a></li>
                        <li><a href="#views">Views</a></li>
                        <li><a href="#javascript">Javascript</a></li>
                        <li><a href="#details">Row Details</a></li>
                        <li><a href="#update">Row Update</a></li>
                        <li><a href="#rowactions">Row Actions</a></li>
                        <li><a href="#bulkactions">Bulk Actions</a></li>
                    </ul>
                </li>
            </ul>
        </div>
    </div>

    <main class="col-md-9 col-lg-9" role="main">
        <div class="bs-docs-section">
            <div class="page-header">
                <h1 id="example">Building Grids and Toolbars</h1>
            </div>
            <p>
                BForms Grid and Toolbar components are designed to provide rich functionality, cross-browser, cross-device and internationalization support for tabular data providing full CRUD and search operations over complex datasets.
            </p>
            <p>
                The feature set includes AJAX-enabled paging, sorting, editing, filtering and built-in data repository adapted for Entity Framework that can be customized with your own query logic. The UI is touch friendly and HTML5 enhanced featuring edit in place, master-details view and multi row select with bulk actions.
            </p>
            <p>
                On the client side, the Grid is deployed as an AMD jQuery widget that supports theming and templates. The styling is done using bootstrap v3 CSS grid system.
            </p>
            <h3 id="introduction">Introduction</h3>
            <p>
                In this tutorial, you will learn how to implement the <code>BForms.Grid</code> from scratch. We start by presenting the models we’ll use. Then will begin building the grid to present our data, step by step, adding more functionality as we go. At this step you will have a grid that displays your data, with sorting and pagination capabilities. Next step is to add editing capabilities to our rows by enabling the details for each row. We’ll also implement the Bulk Actions that will help us modify multiple rows at a time.
            </p>
            <h3 id="initial"> Initial Project </h3>
            <p>We will start from an empty MVC Project. The project will be setup to use RequireJS and BForms.  To see a guide on how to setup your initial project please follow this link: <a href="@Url.Action("Setup", "Start", new { area = "" })#setup">Setup BForms for ASP.NET MVC</a></p>
            <p>We will work with mocked data that will fake a movies database.</p>
            <h4 class="sub_title">Movie Model Object</h4>
            <pre class="prettyprint bs-example">
@Html.InsertFileContentCached("~/Views/Start/Grid/Source/_Model.cs.embed")
            </pre>
            <br />
            <p>
                Our mocked data will consist in a list of movie objects added in the <code>BFormsContext</code> Constructor method. Here is an example of a movie record:
            </p>
            <pre class="prettyprint bs-example">
@Html.InsertFileContentCached("~/Views/Start/Grid/Source/_ModelInitialization.cs.embed")
            </pre>
            <br />
            <p>The <code>BFormsContext</code> Object will be instantiated in the <code>BaseController</code> class. All our controllers will inherit from <code>BaseController</code>. This way will have access to the <code>BFormsContext</code> from inside our controllers.</p>
            
            <h3 id="models">1. Creating the Models</h3>
            <p>
                In this step we will create the models needed to build the grid. In our project let’s create a folder named ‘Models’. Add a new empty class file to this folder Named ‘MoviesModels.cs’.  This file will contain all our grid related models.
            </p>
            <p>
                The first model will be the row model. This model is used by the grid widget to populate the columns and header. The fields can be annotated with the <code>BsGridColumnAttribute</code>. This attribute can set some properties for the columns. For example, the ‘Title’ column width is set to 4, is made sortable and editable.
            </p>
            <pre class="prettyprint bs-example">
@Html.InsertFileContentCached("~/Views/Start/Grid/Source/_RowModel.cs.embed")
            </pre>
            <br />
            <p>Here is how our grid will look for this row model:</p>
            <div class="bs-example bs-img-example">
                <img src="@Url.Content("~/Content/images/docs/eg-row-model.png")" />
            </div>
            <br />
            <p>
                As you can see width of each column corresponds to the width specified in the model. The total width must be 12. Also because we have set the IsSortable property to false for the GrossRevenue column, you can see that the sorting is disabled in the grid, while for the other columns is enabled.
            </p>
            <br />
            <p>All this properties can be overridden in the view, but we’ll see this at a later time.</p>
            <p>
                However this is not enough. We still need a View Model. The grid can’t use the Row Model directly. After you define the row model you have to wrap it with the <code>BSGridModel</code> and append it to the view model.
            </p>
            <p>Here is how our Movies View Model will look like:</p>
            <pre class="prettyprint bs-example">
@Html.InsertFileContentCached("~/Views/Start/Grid/Source/_ViewModel.cs.embed")
            </pre>
            <br />
            <p>Using Data Annotation we can set the properties for the grid. We use <code>Display(Name)</code> to set the name shown above the grid header. You can see the text ‘Top Movies’ next to the number representing the count.</p>
            <div class="bs-example bs-img-example">
                <img src="@Url.Content("~/Content/images/docs/eg-view-model.png")" />
            </div>
            <br />
            <p>We also set the <code>BsGrid(HasDetails)</code> to false. This means that the row will not expand to show more details. We’ll set this to true at a later time.</p>
            <p>If we’ll add the <code>BForms.Toolbar</code> widget, our MoviesViewModel will also contain the Toolbar model. We’ll add it at a later time. For now we only need the Grid Model.</p>
            
            <h3 id="repository">2. Creating the Grid Repository</h3>
            <p>
                In this step we will create the Movies Grid Repository. This repository will inherit from <code>BsBaseGridRepository</code> and will have to override a few methods. These methods will be used to filter and sort the grid.
            </p>
            <p>In our project let’s create a folder named ‘Repositories’. Add a new empty class file to this folder named ‘MoviesGridRepository.cs’.</p>
            <p>
                This is how the initial class will look:
            </p>
            <pre class="prettyprint bs-example">
@Html.InsertFileContentCached("~/Views/Start/Grid/Source/_GridRepository.cs.embed")
            </pre>
            <br />
            <p>
                As you can see, we inherit from <code>BsBaseGridRepository</code> and we pass the Movie Entity and the Movies Row Model. We also initialize the <code>BFormsContext</code> that we will later use to query the data set.
            </p>
            <p>
                Next we have to implement the <code>Query()</code> method.
            </p>
            <pre class="prettyprint bs-example">
@Html.InsertFileContentCached("~/Views/Start/Grid/Source/_Query.cs.embed")
            </pre>
            <br />
            <p>
                This method is used to get the basic query. The items returned by this query will represent the total count, and will be ordered and mapped with the help of the methods we’ll implement next.
            </p>
            <p>
                The second method that we have to implement is <code>OrderQuery()</code>.
            </p>
            <pre class="prettyprint bs-example">
@Html.InsertFileContentCached("~/Views/Start/Grid/Source/_OrderQuery.cs.embed")
            </pre>
            <br />
            <p>
                Here we use <code>orderQueryBuilder</code> property to order the query. In this example we order the query by WeekendRevenue descending. You can use any property of your model to set the initial order for your grid. Also if you have columns that don’t have an exact correspondent in your entity model, you have to use the <code>OrderFor()</code> method to specify the mapping. In this example we specify that the Recommended property of our row model will correspond to the IsRecommended property of our Movie Entity. Another usage of the OrderFor method would be to map one column to multiple properties of the entity.
            </p>
            <p>
                The final method we must implement is <code>MapQuery()</code>. This method is used make the select and convert your entities in row models. To do this, you will most likely implement a mapper(TEntity, TRow) to use in the select.
            </p>
            <p>Here is how the <code>MapQuery()</code> method will look like in our case:</p>
            <pre class="prettyprint bs-example">
@Html.InsertFileContentCached("~/Views/Start/Grid/Source/_MapQuery.cs.embed")
            </pre>
            <br />
            <p>
                We have to also implement the MapMovie_MovieRowModel() used in the above example. This is how the mapper will look in our case:
            </p>
            <pre class="prettyprint bs-example">
@Html.InsertFileContentCached("~/Views/Start/Grid/Source/_Mapper.cs.embed")
            </pre>
            <p>This is a delegate that will take a Movie Entity and will return a <code>MovieRowModel</code>.</p>
            <p>At a later time we will enhance these methods to support search and filtering functionality.</p>
            
            <h3 id="controller">3. Creating the Controller</h3>
            <p>
                In this step we will create the Grid Controller. This controller will contain the actions needed to display the grid. We will display our grid on the home page so our controller will be named 'HomeController'.
            </p>
            <p>
                Create a new controller in the ‘Controllers’ folder. This controller will inherit from the BaseController. This is how it will look like:
            </p>
            <pre class="prettyprint bs-example">
@Html.InsertFileContentCached("~/Views/Start/Grid/Source/_Controller.cs.embed")
            </pre>
            <br />
            <p>
                The index action of this controller will render the view that will contain our grid. However we have to do some changes before we can send the model our view will be expecting. We have to initialize our Grid Model with some initial settings like ‘Page’ and ‘PageSize’. Then we’ll use this model to initialize our View Model. The View Model will be send to the view. 
            </p>
            <p>
                Also we have to use <code>RequireJsOptions.Add()</code> method to send some data to the page. The data we need to send is the name of the ajax action that will be used by the grid pager to return other pages. This will be in the form of a Dictionary object that will contain for the moment only the <code>pageUrl</code> property.
            </p>
            <p>
                This is how our Index Action will look like at the end:
            </p>
            <pre class="prettyprint bs-example">
@Html.InsertFileContentCached("~/Views/Start/Grid/Source/_IndexAction.cs.embed")
            </pre>
            <br />
            <p>
                Next we have to implement our <code>Pager()</code> Action that will be called by ajax from our grid and will return the requested page as <code>BsJsonResult</code>. Here is the final implementation of the method:
            </p>
            <pre class="prettyprint bs-example">
@Html.InsertFileContentCached("~/Views/Start/Grid/Source/_PagerAction.cs.embed")
            </pre>
            <br />
            <p>After we implement these actions, our controller is ready. Next we have to create the views.</p>
            
            <h3 id="views">4. Creating the Views</h3>
            <p>
                In this step we will create the Grid Views. The Grid view will be implemented as a partial view rendered inside the Index View. Let’s first create the index view. To do this right click on the index action and choose ‘Add View’.
            </p>
            <p>
                This is how our index.cshtml should look like:
            </p>
            <pre class="prettyprint bs-example">
@Html.InsertFileContentCached("~/Views/Start/Grid/Source/_IndexView.cs.embed")
            </pre>
            <br />
            <p>
                This view is just a container for the grid view. Let’s now create the <code>_Grid</code> partial view. Here we use the <code>BsGridFor()</code> html helper to create our grid. This helper returns a <code>BsGridHtmlBuilder</code> used to build and configure the html of the grid. This way we can set the grid’s properties, add attributes on the rows, add and modify columns, set grid’s color theme, add bulk actions, etc. This is our grid partial view:
            </p>
            <pre class="prettyprint bs-example">
@Html.InsertFileContentCached("~/Views/Start/Grid/Source/_GridView.cs.embed")
            </pre>
            <br />
            <p>
                To keep it simple for the moment we only set some properties for the pager with the help of the <code>PagerSettings()</code> method, and we modify two columns with the help of <code>ConfigureColumns()</code> method.
            </p>
            <p>
                In the <code>ConfigureColumns()</code> method we change the display header of the column from <code>ReleaseDate</code> to <code>Year</code> with the help of the <code>Name()</code> method, and we also change the text so it displays only the <code>Year</code> property of the <code>ReleaseDate</code>.  For the <code>Recommended</code> column, we change the display text from true/false to Yes/No.
            </p>
            <p>
                In the <code>PagerSettings()</code> method we set the number of rows that should be displayed in the grid and we customize the look by setting some of the properties to true. With these settings the pager should look like this:
            </p>
            <div class="bs-example bs-img-example">
                <img src="@Url.Content("~/Content/images/docs/eg-pager.png")" />
            </div>
            <br />
            <p>
                At this moment we still have to initialize the grid in javascript. We’ll do this next.
            </p>
            
            <h3 id="javascript">5. Initializing the Grid Widget</h3>
            <p>
                In this step we will create the javascript file that will be executed when the index page loads. There are two ways of working with the BForms JS components. One way is to use <code>RequireJS.NET</code> and the other is to reference the js files directly from the <code>~/Scripts/BForms/Bundles/js</code> folder. In this example we’ll use the RequireJS way. For this let’s create the folder structure that the RequireJs expects for our views.
            </p>
            <div class="bs-example bs-img-example">
                <img src="@Url.Content("~/Content/images/docs/eg-js-folder.png")" />
            </div>
            <br />
            <p>
                Inside the Scripts folder create the following folder structure corresponding to our Home Controller, Index page: <code>Controllers/Root/Home/home-index.js</code>
            </p>
            <p>
                This is how the javascript file will look:
            </p>
            <pre class="prettyprint bs-example">
@Html.InsertFileContentCached("~/Views/Start/Grid/Source/_HomeIndexJs.cs.embed")
            </pre>
            <br />
            <p>
                In this javascript file we require <code>bforms-grid</code>, <code>jquery</code> and <code>bootstrap</code>. We use the jQuery document ready method to initialize our page and to get the options send from the <code>HomeController</code>. As you remember we have send as an option the ‘pageUrl’, which is a link to the action that needs to be called by the pager, to get a different page or to change the number of entries displayed. On the page initialization we also find the grid by it’s id and initialize it with the minimum required parameters. We only set a <code>uniqueName</code> and the <code>pagerUrl</code> properties. We will later set more properties as we enhance the functionality of our grid. 
            </p>
            <p>
                Now we have a functional grid that we can see in action.
            </p>
            <div class="bs-example bs-img-example">
                <img src="@Url.Content("~/Content/images/docs/eg-simple-grid.png")" />
            </div>
            <br />
            <p>
                Next step will be to enable details for the rows. This way we can modify the data and submit the changes to the server.
            </p>
            <h3 id="details">6. Enable Row Details</h3>
            <p>
                In this step we will modify our code to support row editing. For this we'll have to add a Details Model, create Details partial views, add new Actions to our Controller and add new options to our javascript Grid Widget.
            </p>
            <h4>Details Model</h4>
            <p>
                First step is to create our <code>MovieDetailsModel</code>.
            </p>
            <pre class="prettyprint bs-example">
@Html.InsertFileContentCached("~/Views/Start/Grid/Source/_DetailsModel.cs.embed")
            </pre>
            <br />
            <p>
                You should include in your <code>DetailsModel</code> all the properties from your base model that you want to modify. The details view will enable us to edit these properties.
            </p>
            <p>
                A good approach would be to split our properties in multiple parts, to reduce the data send to the server each time a user wants to modify a property. Let’s say we want to change only the <code>WeekendRevenue</code> and the <code>GrossRevenue</code> of our model. If we keep all the properties as fields in the same form, all the data will be send to the server on each request. If we separate the fields in multiple forms on the details view, only part of the data will be send. In our case we will have our model split in two parts: Info and Revenue.
            </p>
            <p>
                To implement this we need an enum that contains all the parts. This is how our <code>EditComponents</code> enum will look:
            </p>
            <pre class="prettyprint bs-example">
@Html.InsertFileContentCached("~/Views/Start/Grid/Source/_EditComponents.cs.embed")
            </pre>
            <br />
            <p>
                The <code>Info</code> view will contain the <code>Title</code>, <code>Poster</code>, <code>Genre</code> and <code>Rating</code> fields. 
            </p>
            <p>
                The <code>Revenue</code> view will contain the <code>WeekendRevenue</code>, <code>GrossRevenue</code> and <code>ReleaseDate</code> fields.
            </p>
            <h4>Row Model</h4>
            <p>
                We also need to change the <code>MoviesRowModel</code> to inherit from the <code>BsGridRowModel&lt;MovieDetailsModel&gt;</code>. We'll need this in our Grid Partial View to create a <code>BsGridHtmlBuilder</code> object.
            </p>
            <pre class="prettyprint bs-example">
@Html.InsertFileContentCached("~/Views/Start/Grid/Source/_RowModelDetails.cs.embed")
            </pre>
            <br />
            <h4>View Model</h4>
            <p>
                The final change we make to our models is to set the <code>HasDetails</code> parameter to <code>true</code> on the <code>MoviesViewModel</code>'s <code>Grid</code> property.
            </p>
            <pre class="prettyprint bs-example">
@Html.InsertFileContentCached("~/Views/Start/Grid/Source/_ViewModelDetails.cs.embed")
            </pre>
            <br />
            <h4>The Detail Views</h4>
            <p>
                Now that we have the Models we can move on to the Views. Before adding the details partial views we need to make some changes to the <code>_Grid</code> partial view.
            </p>
            <p>We use an overloaded method for <code>Html.BsGridFor()</code> helper that takes two parameters. The first one is the Grid Model, and we pass it from our View Model. The second parameter is a <code>BSGridHtmlBuilder</code> object. We need to create this object first.</p>
            <p>
                Here is the code that needs to be modified on the <code>_Grid</code> partial view:
            </p>
            <pre class="prettyprint bs-example">
@Html.InsertFileContentCached("~/Views/Start/Grid/Source/_GridViewBuilder.cs.embed")
            </pre>
            <br />
            <p>
                We can now use the <code>ConfigureRows()</code> method to customize the rows. We set a details template, then we add <code>objid</code> as a custom data attribute, and finaly we set a row highliter based on the <code>Recommended</code> property of our model.
            </p>
            <pre class="prettyprint bs-example">
@Html.InsertFileContentCached("~/Views/Start/Grid/Source/_GridConfigureRows.cs.embed")
            </pre>
            <br />
            <p>
                In the previous step we have set the <code>DetailsTemplate</code> for the rows to <code>Grid/Details/_Index</code>. We also pass the <code>MovieDetailsModel</code>. Now we have to create this template.
            </p>
            <p>
                As you know we have split our details model in two parts: <code>Info</code> and <code>Revenue</code>. This will correspond to two partial views named <code>_Info</code> and <code>_Revenue</code>. Each of these views will include a <code>Readonly</code> and an <code>Editable</code> partial views.
            </p>
            <p>
                The final structure of the Views Folder will look like this:
            </p>
            <div class="bs-example bs-img-example">
                <img src="@Url.Content("~/Content/images/docs/eg-grid-views.png")" />
            </div>
            <br />
            <p>In the next part we'll take a look at the code for each view.</p>
            <h4>Details Index View</h4>
            <p>
                The <code>_Index</code> view includes the <code>_Info</code> and the <code>_Revenue</code> partial views using the <code>Html.BsPartialPrefixed()</code> helper method.
            </p>
            <p>
                Also in this view we add two buttons for that will be available in each row. The <code>State</code> Button which will toggle the Recommended property of our model, and the <code>Delete</code> Button which will delete the row from the grid and from the database.
            </p>
            <p>
                The classes used on this button elements will be later used in the javascript file to identify the buttons and to attach event handlers on them. We used <code>js-btn_state</code> for the Recommended Button, and <code>js-btn_delete</code> for the Delete Button.
            </p>
            <pre class="prettyprint bs-example">
@Html.InsertFileContentCached("~/Views/Start/Grid/Source/_DetailsIndexView.cs.embed")
            </pre>
            <br/>
            <p>This is how a expanded row will look like at the end:</p>
            <div class="bs-example bs-img-example">
                <img src="@Url.Content("~/Content/images/docs/eg-row-expand-readonly.png")" />
            </div>
            <br />
            <p>We still need to implement our <code>_Info</code> and <code>Review</code> pages.</p>
            <p>
                The <code>_Info</code> view creates an editable widget and loads the <code>_InfoReadonly</code> and <code>_InfoEditable</code> partial views. By default the Readonly page is displayed. To enable editing the user has to click the 'Pencil' icon in the <code>&lt;h3&gt;</code> that has the class <code>open-editable</code>.
            </p>
            <pre class="prettyprint bs-example">
@Html.InsertFileContentCached("~/Views/Start/Grid/Source/_InfoView.cs.embed")
            </pre>
            <br />
            <p>
                The <code>_InfoReadonly</code> partial view shows the <code>Poster</code>, <code>Title</code>, <code>Rating</code> and <code>GenresList</code> properties of our <code>MoviesDetailsModel</code>.
            </p>
            <pre class="prettyprint bs-example">
@Html.InsertFileContentCached("~/Views/Start/Grid/Source/_InfoReadonlyView.cs.embed")
            </pre>
            <div class="bs-example bs-img-example">
                <img src="@Url.Content("~/Content/images/docs/eg-info-readonly.png")" />
            </div>
            <br />
            <p>
                <code>_InfoEditable</code> partial views uses some <code>BForms</code> helpers to render the form fields.
            </p>
            <pre class="prettyprint bs-example">
@Html.InsertFileContentCached("~/Views/Start/Grid/Source/_InfoEditableView.cs.embed")
            </pre>
            <div class="bs-example bs-img-example">
                <img src="@Url.Content("~/Content/images/docs/eg-info-editable.png")" />
            </div>
            <br />
            <p>
                The code to save, delete or toggle the <code>Recommended</code> property will be later implemented in the Controller.
            </p>
            <p>
                The <code>_Revenue</code> view is similar.
            </p>
            <h3>The Controller</h3>
            <p>
                In order to display the details on our page we have to make an ajax request to the server. The server will return the html used to render the details. For this we have to add a <code>GetRows</code> Action to our controller.
            </p>
            <p>This is how the <code>GetRows</code> Action will look:</p>
            <pre class="prettyprint bs-example">
@Html.InsertFileContentCached("~/Views/Start/Grid/Source/_GetRowsActionController.cs.embed")
            </pre>
            <br />
            <p>
                As you can see in the code, <code>GetRows()</code> Action calls <code>GetRowsHtml()</code> NonAction, to return the details for the requested rows. <code>GetRowsHtml()</code> calls <code>ReadRows()</code> in the repository.
            </p>
            <p>
                The <code>ReadRows()</code> method gets the entities from the database by their Ids, converts them to RowModel and returns them as a List.
            </p>
            <pre class="prettyprint bs-example">
@Html.InsertFileContentCached("~/Views/Start/Grid/Source/_ReadRowsGridRepository.cs.embed")
            </pre>
            <br />
            <p>
                Finally we have to add the <code>getRowsUrl</code> and <code>editComponents</code> options to the RequireJs options dictionary. This way we can access them from the javascript file.
            </p>
            <p>
                Here is how the <code>options</code> dictionary will look like for the <code>Index</code> Action:
            </p>
            <pre class="prettyprint bs-example">
@Html.InsertFileContentCached("~/Views/Start/Grid/Source/_OptionsGetRowsIndexAction.cs.embed")
            </pre>
            <br />
            <h3>The Details JavaScript</h3>
            <p>
                In this section we'll write the code we need in our <code>home-index.js</code> script file to display the details for each row.
            </p>
            <p>
                Now that we have the <code>getRowsUrl</code> from the controller we can pass it to our grid. We also need to pass two handles that will be called before and after the <code>Row Details</code> ajax call is successful. The grid properties that need to be set are <code>beforeRowDetailsSuccess</code> and <code>afterRowDetailsSuccess</code>.
            </p>
            <pre class="prettyprint bs-example">
@Html.InsertFileContentCached("~/Views/Start/Grid/Source/_detailsUrlHomeIndexJs.cs.embed")
            </pre>
            <br />
            <p>
                The <code>_beforeDetailsSuccessHandler</code> sets the options for the editable views, like the <code>updateUrl</code> and <code>editSuccessHandler</code>, by calling the <code>_editableOptions()</code> method.
            </p>
            <p>
                The <code>_afterDetailsSuccessHandler</code> validates the returned row.
            </p>
            <p>
                Here is the code that needs to be implemented:
            </p>
            <pre class="prettyprint bs-example">
@Html.InsertFileContentCached("~/Views/Start/Grid/Source/_detailsHandlersHomeIndexJs.cs.embed")
            </pre>
            <br />
            <p>
                For the validation we need to require more scripts before this page loads. The scripts that we need are <code>bforms-validate</code>, <code>bforms-validate-unobtrusive</code> and also <code>bforms-ajax</code>.
            </p>
            <pre class="prettyprint bs-example">
@Html.InsertFileContentCached("~/Views/Start/Grid/Source/_RequireHomeIndexJs.cs.embed")
            </pre>
            <br />
            <p>
                The <code>_editableOptions()</code> method needs to know the <code>updateUrl</code>. This url will be called when the user clicks the save button in the editable view. We also need to implement the Update Action in the Controller.
            </p>

            <h3 id="update">7. Editing and Updating the Rows</h3>
            <p>
                To update the changes made to a row the grid will make an ajax call to the <code>Update</code> action on the controller.
            </p>
            <pre class="prettyprint bs-example">
@Html.InsertFileContentCached("~/Views/Start/Grid/Source/_UpdateActionController.cs.embed")
            </pre>
            <br />
            <p>
                The <code>Update</code> Action receives the modified <code>MovieDetailsModel</code> and the <code>EditComponents</code> componentId. It clears the state of the model based on the component id by calling the <code>ClearModelState</code> NonAction in the same controller.
            </p>
            <p>
                This is how the <code>ClearModelState</code> NonAction is implemented:
            </p>
            <pre class="prettyprint bs-example">
@Html.InsertFileContentCached("~/Views/Start/Grid/Source/_ClearModelStateController.cs.embed")
            </pre>
            <br />
            <p>
                After the model state is cleared, the <code>Update()</code> method in the repository is called. This will save the changes in the database and will return the details model after it fills the dropdowns and lists used in the model.
            </p>
            <p>This is the code for the <code>Update</code> method in the repository.</p>
            <pre class="prettyprint bs-example">
@Html.InsertFileContentCached("~/Views/Start/Grid/Source/_UpdateGridRepository.cs.embed")
            </pre>
            <br />
            <p>
                Also in the <code>Update</code> Action we call the <code>ReadRow</code> method in the repository to return the row model.
            </p>
            <pre class="prettyprint bs-example">
@Html.InsertFileContentCached("~/Views/Start/Grid/Source/_ReadRowGridRepository.cs.embed")
            </pre>
            <br />
            <p>
                We also need to add the <code>updateUrl</code> to the RequireJs options.
            </p>
            <pre class="prettyprint bs-example">
@Html.InsertFileContentCached("~/Views/Start/Grid/Source/_OptionsUpdateIndexAction.cs.embed")
            </pre>
            <br />
            <h3 id="rowactions">8. Row Actions</h3>
            <p>
                We want to add two buttons to each row. One to toggle the <code>Recommended</code> property and one to delete the row. The buttons will be visible when the row is expanded.
            </p>
            <div class="bs-example bs-img-example">
                <img src="@Url.Content("~/Content/images/docs/eg-row-actions.png")" />
            </div>
            <br />
            <p>
                To implement the <code>Delete</code> and <code>Recommended</code> buttons we have to provide to the grid an array of <code>rowAction</code> objects. We implement this in the <code>home-index.js</code> file. This is how the <code>initGrid</code> method will look at the end:
            </p>
            <pre class="prettyprint bs-example">
@Html.InsertFileContentCached("~/Views/Start/Grid/Source/_gridInitHomeIndexJs.cs.embed")
            </pre>
            <br />
            <p>
                The <code>rowActions</code> option takes an array of json objects. One object for each button. In each object we set the url for the action on the server, the selector for the button element and the handler.
            </p>
            <p>
                Here are the handlers for the <code>Delete</code> and <code>Recommended</code> buttons in the javascript file:
            </p>
            <pre class="prettyprint bs-example">
@Html.InsertFileContentCached("~/Views/Start/Grid/Source/_rowActionsHandlersHomeIndexJs.cs.embed")
            </pre>
            <br />
            <p>
                The handlers make ajax calls to the server. We need to implement the <code>Delete</code> and the <code>Recommended</code> actions on the Controller.
            </p>
            <pre class="prettyprint bs-example">
@Html.InsertFileContentCached("~/Views/Start/Grid/Source/_DeleteRecommendActionController.cs.embed")
            </pre>
            <br />
            <p>
                We also need to implement the actual <code>Delete</code> and <code>Recommend</code> toggle methods in the repository.
            </p>
            <pre class="prettyprint bs-example">
@Html.InsertFileContentCached("~/Views/Start/Grid/Source/_DeleteRecommendGridRepository.cs.embed")
            </pre>
            <br />
            <p>
                The final step is to add the <code>deleteUrl</code> and <code>recommendUrl</code> to the RequireJs options.
            </p>
            <pre class="prettyprint bs-example">
@Html.InsertFileContentCached("~/Views/Start/Grid/Source/_IndexActionFinal.cs.embed")
            </pre>
            <br />
            <p>
                Now we have a functional grid. We can edit, delete and toggle rows. This is how the grid looks like with an expanded row.
            </p>
            <div class="bs-example bs-img-example">
                <img src="@Url.Content("~/Content/images/docs/eg-grid-final.png")" />
            </div>
            <br />
            <h3 id="bulkactions">8. Bulk Actions</h3>
            <p>
                Bulk Actions are actions applied to multiple rows at the same time. When Bulk Actions are enabled a checkbox control is rendered next to each row. You can manually select multiple rows, or you can apply a filter.
            </p>
            <p>
                In our Top Movies Grid we will filter the columns by the <code>Recommended</code> property. For example, we will be able to select all recommended Movies and call the delete bulk action to erase all the selected rows from the grid at the same time. 
            </p>
            <h4>Adding Bulk Actions to the Grid View</h4>
            <div class="bs-example bs-img-example">
                <img src="@Url.Content("~/Content/images/docs/eg-bulk-actions.png")" />
            </div>
            <br />
            <p>
                To render the buttons on the page, we need to call two functions on the <code>Html.BsGridFor()</code> Helper. <code>GridResetButton()</code> to render a Bulk Reset Button and <code>ConfigureBulkActions()</code> to add three more buttons - Recommend, Unrecommend and Delete.
            </p>
            <pre class="prettyprint bs-example">
@Html.InsertFileContentCached("~/Views/Start/Grid/Source/_GridViewBulkActions.cs.embed")
            </pre>
            <br />
            <p>
                As you can see in the above code, we use <code>AddAction()</code> to add the buttons, and <code>AddSelector()</code> to add the options for the filter dropdown.
            </p>
            <p>
                Here is how the grid should look like:
            </p>
            <div class="bs-example bs-img-example">
                <img src="@Url.Content("~/Content/images/docs/eg-filter-buttons.png")" />
            </div>
            <br />
            <h4>Bulk Actions Javascript</h4>
            <p>
                Now that we have the buttons added to the page we have to initialize them in the javascript file. 
            </p>
            <p>
                To initialize the Filter Selector we pass an array of objects to the <code>filterButtons</code> property of our grid widget, representing the selector and the filter function that will be called when the filter is selected.
            </p>
            <p>
                To initialize the Bulk Action buttons we need to pass an array of objects to the <code>gridActions</code> property of our Movies Grid widget, representing the selector and handler for each button.
            </p>
            <pre class="prettyprint bs-example">
@Html.InsertFileContentCached("~/Views/Start/Grid/Source/_BulkActionsHomeIndexJs.cs.embed")
            </pre>
            <br />
            <p>
                In the delete action we also set the <code>popover</code> option to <code>true</code>. This will enable the confirmation popup for the delete action.
            </p>
            <div class="bs-example bs-img-example">
                <img src="@Url.Content("~/Content/images/docs/eg-popup.png")" />
            </div>
            <br />
            <p>
                Now the Bulk Actions are functional. On the server we call the existing methods for delete and recommend/unrecommend actions. If you implement a custom action you have to send the URL in the RequireJs Options from the controller.
            </p>
        </div>
    </main>
</div>
