// view model
public class ContributorsViewModel
{
    [BsGrid(HasDetails = true)]
    [Display(Name = "Contributors", ResourceType = typeof(Resource))]
    public BsGridModel<ContributorRowModel> Grid { get; set; }

    [BsToolbar(Theme=BsTheme.Black)]
    [Display(Name = "Contributors", ResourceType = typeof(Resource))]
    public BsToolbarModel<ContributorSearchModel, ContributorNewModel> Toolbar { get; set; }
}

// common model
public class ContributorModel
{
    public ContributorModel()
    {
        RoleList = new BsSelectList<ProjectRole?>();
        RoleList.ItemsFromEnum(typeof(ProjectRole));
    }

    [Display(Name = "Web address", Prompt = "http://mysite.com or http://twitter.com/id")]
    [BsControl(BsControlType.Url)]
    public string Url { get; set; }

    [Required(ErrorMessageResourceName = "RequiredField", ErrorMessageResourceType = typeof(Resource))]
    [Display(Name = "Contributor since")]
    [BsControl(BsControlType.DatePicker)]
    public BsDateTime StartDate { get; set; }

    [Required(ErrorMessageResourceName = "RequiredField", ErrorMessageResourceType = typeof(Resource))]
    [Display(Name = "Location", Prompt = "Choose your country")]
    [BsControl(BsControlType.DropDownList)]
    public BsSelectList<string> CountriesList { get; set; }

    [Required(ErrorMessageResourceName = "RequiredField", ErrorMessageResourceType = typeof(Resource))]
    [Display(Name = "Role", Description = "Your main role in project")]
    [BsControl(BsControlType.RadioButtonList)]
    public BsSelectList<ProjectRole?> RoleList { get; set; }

    [Required(ErrorMessageResourceName = "RequiredField", ErrorMessageResourceType = typeof(Resource))]
    [Display(Name = "Programming languages", Prompt = "Type your favorite programming languages")]
    [BsControl(BsControlType.TagList)]
    public BsSelectList<List<string>> LanguagesList { get; set; }

    [Display(Name = "Contributions")]
    [BsControl(BsControlType.TextArea)]
    public string Contributions { get; set; }
}

// row model
public class ContributorRowModel
{
    public int Id { get; set; }

    [BsGridColumn(Width = 2, IsEditable = true)]
    public string Name { get; set; }

    [BsGridColumn(Width = 2)]
    public DateTime StartDate { get; set; }

    [BsGridColumn(Width = 3)]
    public ProjectRole Role { get; set; }

    [BsGridColumn(Width = 5)]
    public string Contributions { get; set; }

    [BsGridColumn(Width = 1, Usage = BsGridColumnUsage.Excel)]
    public bool Enabled { get; set; }

    public Dictionary<string, object> RowData()
    {
        return new Dictionary<string, object> 
        {
            { "data-objid", Id },
            { "data-active", Enabled }
        };
    }
}

// details model
public class ContributorDetailsModel : ContributorNewModel
{
    public ContributorDetailsModel()
        : base() {}

    public int Id { get; set; }
    public bool Enabled { get; set; }

    public string Country { get; set; }

    public ProjectRole Role { get; set; }

    public List<string> Languages { get; set; }

    public DateTime ContributorSince { get; set; }
}

// search model
public class ContributorSearchModel : ContributorModel
{
    public ContributorSearchModel()
    {
        IsEnabled = new BsSelectList<YesNoValueTypes?>();
        IsEnabled.ItemsFromEnum(typeof(YesNoValueTypes));
        IsEnabled.SelectedValues = YesNoValueTypes.Both;

        RoleList = new BsSelectList<ProjectRole?>();
        RoleList.ItemsFromEnum(typeof(ProjectRole));
    }

    [Display(Name = "ChooseInterval", ResourceType = typeof(Resource))]
    [BsControl(BsControlType.DatePickerRange)]
    public BsRange<DateTime?> StartDateRange { get; set; }

    [Display(Name = "Name", ResourceType = typeof(Resource))]
    [BsControl(BsControlType.TextBox)]
    public string Name { get; set; }

    [BsControl(BsControlType.RadioButtonList)]
    [Display(Name = "IsEnabled", ResourceType = typeof(Resource))]
    public BsSelectList<YesNoValueTypes?> IsEnabled { get; set; }

    [Display(Name = "Location", Prompt = "PromptLocation", ResourceType = typeof(Resource))]
    [BsControl(BsControlType.DropDownList)]
    public new BsSelectList<string> CountriesList { get; set; }

    [Display(Name = "Role", Description = "Role in current project")]
    [BsControl(BsControlType.RadioButtonList)]
    public new BsSelectList<ProjectRole?> RoleList { get; set; }

    [Display(Name = "Programming in", Prompt = "Type languages")]
    [BsControl(BsControlType.TagList)]
    public new BsSelectList<List<string>> LanguagesList { get; set; }
}

// new model
public class ContributorNewModel : ContributorModel
{
    public ContributorNewModel() : base()
    {
        IsEnabled = new BsSelectList<YesNoValueTypes?>();
        IsEnabled.ItemsFromEnum(typeof(YesNoValueTypes), YesNoValueTypes.Both);
        IsEnabled.SelectedValues = YesNoValueTypes.Yes;

        RoleList = new BsSelectList<ProjectRole?>();
        RoleList.ItemsFromEnum(typeof(ProjectRole));
        RoleList.SelectedValues = ProjectRole.Developer;
    }

    [Required]
    [BsControl(BsControlType.RadioButtonList)]
    [Display(Name = "IsEnabled", ResourceType = typeof(Resource))]
    public BsSelectList<YesNoValueTypes?> IsEnabled { get; set; }

    [Required(ErrorMessageResourceName = "RequiredField", ErrorMessageResourceType = typeof(Resource))]
    [Display(Name = "FirstName", ResourceType = typeof(Resource))]
    [BsControl(BsControlType.TextBox)]
    public string FirstName { get; set; }

    [Required(ErrorMessageResourceName = "RequiredField", ErrorMessageResourceType = typeof(Resource))]
    [Display(Name = "LastName", ResourceType = typeof(Resource))]
    [BsControl(BsControlType.TextBox)]
    public string LastName { get; set; }
}